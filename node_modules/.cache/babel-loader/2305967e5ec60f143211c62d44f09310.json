{"ast":null,"code":"import _objectSpread from \"/home/quanteon-pc/Ramu/work/practise/taskbox/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n// A simple redux store/actions/reducer implementation.\n// A true app would be more complex and separated into different files.\nimport { createStore } from 'redux'; // The actions are the \"names\" of the changes that can happen to the store\n\nexport var actions = {\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\n  PIN_TASK: 'PIN_TASK'\n}; // The action creators are how you bundle actions with the data required to execute them\n\nexport var archiveTask = function archiveTask(id) {\n  return {\n    type: actions.ARCHIVE_TASK,\n    id: id\n  };\n};\nexport var pinTask = function pinTask(id) {\n  return {\n    type: actions.PIN_TASK,\n    id: id\n  };\n}; // All our reducers simply change the state of a single task.\n\nfunction taskStateReducer(taskState) {\n  return function (state, action) {\n    return _objectSpread({}, state, {\n      tasks: state.tasks.map(function (task) {\n        return task.id === action.id ? _objectSpread({}, task, {\n          state: taskState\n        }) : task;\n      })\n    });\n  };\n} // The reducer describes how the contents of the store change for each action\n\n\nexport var reducer = function reducer(state, action) {\n  switch (action.type) {\n    case actions.ARCHIVE_TASK:\n      return taskStateReducer('TASK_ARCHIVED')(state, action);\n\n    case actions.PIN_TASK:\n      return taskStateReducer('TASK_PINNED')(state, action);\n\n    default:\n      return state;\n  }\n}; // The initial state of our store when the app loads.\n// Usually you would fetch this from a server\n\nvar defaultTasks = [{\n  id: '1',\n  title: 'Something',\n  state: 'TASK_INBOX'\n}, {\n  id: '2',\n  title: 'Something more',\n  state: 'TASK_INBOX'\n}, {\n  id: '3',\n  title: 'Something else',\n  state: 'TASK_INBOX'\n}, {\n  id: '4',\n  title: 'Something again',\n  state: 'TASK_INBOX'\n}]; // We export the constructed redux store\n\nexport default createStore(reducer, {\n  tasks: defaultTasks\n});","map":{"version":3,"sources":["/home/quanteon-pc/Ramu/work/practise/taskbox/src/lib/redux.js"],"names":["createStore","actions","ARCHIVE_TASK","PIN_TASK","archiveTask","id","type","pinTask","taskStateReducer","taskState","state","action","tasks","map","task","reducer","defaultTasks","title"],"mappings":";AAAA;AACA;AACA,SAASA,WAAT,QAA4B,OAA5B,C,CAEA;;AACA,OAAO,IAAMC,OAAO,GAAG;AACrBC,EAAAA,YAAY,EAAE,cADO;AAErBC,EAAAA,QAAQ,EAAE;AAFW,CAAhB,C,CAKP;;AACA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAC,EAAE;AAAA,SAAK;AAAEC,IAAAA,IAAI,EAAEL,OAAO,CAACC,YAAhB;AAA8BG,IAAAA,EAAE,EAAFA;AAA9B,GAAL;AAAA,CAAtB;AACP,OAAO,IAAME,OAAO,GAAG,SAAVA,OAAU,CAAAF,EAAE;AAAA,SAAK;AAAEC,IAAAA,IAAI,EAAEL,OAAO,CAACE,QAAhB;AAA0BE,IAAAA,EAAE,EAAFA;AAA1B,GAAL;AAAA,CAAlB,C,CAEP;;AACA,SAASG,gBAAT,CAA0BC,SAA1B,EAAqC;AACnC,SAAO,UAACC,KAAD,EAAQC,MAAR,EAAmB;AACxB,6BACKD,KADL;AAEEE,MAAAA,KAAK,EAAEF,KAAK,CAACE,KAAN,CAAYC,GAAZ,CACL,UAAAC,IAAI;AAAA,eAAKA,IAAI,CAACT,EAAL,KAAYM,MAAM,CAACN,EAAnB,qBAA6BS,IAA7B;AAAmCJ,UAAAA,KAAK,EAAED;AAA1C,aAAwDK,IAA7D;AAAA,OADC;AAFT;AAMD,GAPD;AAQD,C,CAED;;;AACA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACL,KAAD,EAAQC,MAAR,EAAmB;AACxC,UAAQA,MAAM,CAACL,IAAf;AACE,SAAKL,OAAO,CAACC,YAAb;AACE,aAAOM,gBAAgB,CAAC,eAAD,CAAhB,CAAkCE,KAAlC,EAAyCC,MAAzC,CAAP;;AACF,SAAKV,OAAO,CAACE,QAAb;AACE,aAAOK,gBAAgB,CAAC,aAAD,CAAhB,CAAgCE,KAAhC,EAAuCC,MAAvC,CAAP;;AACF;AACE,aAAOD,KAAP;AANJ;AAQD,CATM,C,CAWP;AACA;;AACA,IAAMM,YAAY,GAAG,CACnB;AAAEX,EAAAA,EAAE,EAAE,GAAN;AAAWY,EAAAA,KAAK,EAAE,WAAlB;AAA+BP,EAAAA,KAAK,EAAE;AAAtC,CADmB,EAEnB;AAAEL,EAAAA,EAAE,EAAE,GAAN;AAAWY,EAAAA,KAAK,EAAE,gBAAlB;AAAoCP,EAAAA,KAAK,EAAE;AAA3C,CAFmB,EAGnB;AAAEL,EAAAA,EAAE,EAAE,GAAN;AAAWY,EAAAA,KAAK,EAAE,gBAAlB;AAAoCP,EAAAA,KAAK,EAAE;AAA3C,CAHmB,EAInB;AAAEL,EAAAA,EAAE,EAAE,GAAN;AAAWY,EAAAA,KAAK,EAAE,iBAAlB;AAAqCP,EAAAA,KAAK,EAAE;AAA5C,CAJmB,CAArB,C,CAOA;;AACA,eAAeV,WAAW,CAACe,OAAD,EAAU;AAAEH,EAAAA,KAAK,EAAEI;AAAT,CAAV,CAA1B","sourcesContent":["// A simple redux store/actions/reducer implementation.\n// A true app would be more complex and separated into different files.\nimport { createStore } from 'redux';\n\n// The actions are the \"names\" of the changes that can happen to the store\nexport const actions = {\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\n  PIN_TASK: 'PIN_TASK',\n};\n\n// The action creators are how you bundle actions with the data required to execute them\nexport const archiveTask = id => ({ type: actions.ARCHIVE_TASK, id });\nexport const pinTask = id => ({ type: actions.PIN_TASK, id });\n\n// All our reducers simply change the state of a single task.\nfunction taskStateReducer(taskState) {\n  return (state, action) => {\n    return {\n      ...state,\n      tasks: state.tasks.map(\n        task => (task.id === action.id ? { ...task, state: taskState } : task)\n      ),\n    };\n  };\n}\n\n// The reducer describes how the contents of the store change for each action\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case actions.ARCHIVE_TASK:\n      return taskStateReducer('TASK_ARCHIVED')(state, action);\n    case actions.PIN_TASK:\n      return taskStateReducer('TASK_PINNED')(state, action);\n    default:\n      return state;\n  }\n};\n\n// The initial state of our store when the app loads.\n// Usually you would fetch this from a server\nconst defaultTasks = [\n  { id: '1', title: 'Something', state: 'TASK_INBOX' },\n  { id: '2', title: 'Something more', state: 'TASK_INBOX' },\n  { id: '3', title: 'Something else', state: 'TASK_INBOX' },\n  { id: '4', title: 'Something again', state: 'TASK_INBOX' },\n];\n\n// We export the constructed redux store\nexport default createStore(reducer, { tasks: defaultTasks });"]},"metadata":{},"sourceType":"module"}